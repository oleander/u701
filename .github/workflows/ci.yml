name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust nightly toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src

      - name: Temporarily remove cargo config for standard build
        run: |
          if [ -f .cargo/config.toml ]; then
            mv .cargo/config.toml .cargo/config.toml.bak
          fi

      - name: Build project
        run: cargo build --workspace

      - name: Restore cargo config
        run: |
          if [ -f .cargo/config.toml.bak ]; then
            mv .cargo/config.toml.bak .cargo/config.toml
          fi

  test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Rust nightly toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src

      - name: Temporarily remove cargo config for test
        run: |
          if [ -f .cargo/config.toml ]; then
            mv .cargo/config.toml .cargo/config.toml.bak
          fi

      - name: Run tests
        run: cargo test --workspace

      - name: Restore cargo config
        run: |
          if [ -f .cargo/config.toml.bak ]; then
            mv .cargo/config.toml.bak .cargo/config.toml
          fi

  cargo-pio-build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            .pio
            .embuild
          key: ${{ runner.os }}-cargo-pio-${{ hashFiles('**/Cargo.lock',
            'platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-cargo-pio-

      - name: Install Rust nightly toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src

      - name: Install cargo-pio and espup
        run: |
          cargo install cargo-pio
          # Install espup from git to get latest version with potential dependency fixes
          cargo install --git https://github.com/esp-rs/espup espup

      - name: Setup ESP development environment
        run: |
          mkdir -p tmp
          espup install -f tmp/espup.sh
          espup update -f tmp/espup.sh

      - name: Build with cargo-pio (debug)
        run: |
          . tmp/espup.sh && cargo pio build
