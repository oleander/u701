name: Code Verification

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rust-checks:
    name: Rust Verification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Modify the toolchain for CI compatibility
      - name: Setup CI toolchain file
        run: |
          mv rust-toolchain.toml rust-toolchain.original.toml
          cat > rust-toolchain.toml << 'EOF'
          [toolchain]
          channel = "stable"
          components = ["rust-src", "rustfmt", "clippy"]
          EOF

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            ~/.platformio
            ~/.espressif
            target
            .pio
          key: ${{ runner.os }}-verify-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-verify-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-verify-

      - name: Install espup
        run: |
          # Try specific working version first, with fallback to curl installation
          # Use explicit toolchain to avoid conflict with rust-toolchain.toml
          RUSTUP_TOOLCHAIN=stable cargo install espup --version 0.14.0 --locked || {
            echo "Cargo install failed, trying curl installation..."
            curl -L https://github.com/esp-rs/espup/releases/latest/download/espup-x86_64-unknown-linux-gnu -o espup
            chmod +x espup
            sudo mv espup /usr/local/bin/
          }
          espup install -t esp32 -f .espup.sh
          # Source the ESP environment setup file
          source .espup.sh
          # Create a symbolic link for the 'esp' toolchain if needed
          if [ ! -d ~/.rustup/toolchains/esp ]; then
            rustup toolchain link esp ~/.rustup/toolchains/esp
          fi
          # Debug ESP toolchain setup
          echo "Listing Rust toolchains:"
          rustup toolchain list
          echo "Checking ESP toolchain:"
          ls -la ~/.rustup/toolchains/esp/bin/
          # Add target explicitly to avoid ${CARGO_BUILD_TARGET} issue
          echo "Adding xtensa target to ESP toolchain"
          rustup target add --toolchain esp xtensa-esp32-espidf || echo "Target may already be installed"

      - name: Format check
        run: |
          source .espup.sh
          RUSTUP_TOOLCHAIN=stable cargo fmt -- --check

      - name: Clippy
        run: |
          source .espup.sh
          RUSTUP_TOOLCHAIN=esp cargo clippy --workspace --all-targets --all-features --target xtensa-esp32-espidf -- -D warnings

      - name: Test
        run: |
          source .espup.sh
          RUSTUP_TOOLCHAIN=stable cargo test --target x86_64-unknown-linux-gnu

  cpp-checks:
    name: C++ Verification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Modify the toolchain for CI compatibility
      - name: Setup CI toolchain file
        run: |
          mv rust-toolchain.toml rust-toolchain.original.toml
          cat > rust-toolchain.toml << 'EOF'
          [toolchain]
          channel = "nightly"
          components = ["rust-src", "rustfmt", "clippy"]
          EOF

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Setup rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src, rustfmt, clippy

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio

      - name: Install espup and setup ESP toolchain
        run: |
          # Install espup first without using custom toolchain
          RUSTUP_TOOLCHAIN=nightly cargo install espup --version 0.14.0 --locked
          espup install -t esp32 -f .espup.sh
          # Source the ESP environment setup file
          source .espup.sh
          # Create a symbolic link for the 'esp' toolchain if needed
          if [ ! -d ~/.rustup/toolchains/esp ]; then
            rustup toolchain link esp ~/.rustup/toolchains/esp
          fi
          # Debug ESP toolchain setup
          echo "Listing Rust toolchains:"
          rustup toolchain list
          echo "Checking ESP toolchain:"
          ls -la ~/.rustup/toolchains/esp/bin/
          # Add target explicitly to avoid ${CARGO_BUILD_TARGET} issue
          echo "Adding xtensa target to ESP toolchain"
          rustup target add --toolchain esp xtensa-esp32-espidf || echo "Target may already be installed"

      - name: Install cargo dependencies
        run: |
          source .espup.sh
          cargo install cargo-binstall
          cargo binstall cargo-pio just -y

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            ~/.espressif
            target
            .pio
          key: ${{ runner.os }}-cpp-verify-${{ hashFiles('**/platformio.ini') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cpp-verify-${{ hashFiles('**/platformio.ini') }}
            ${{ runner.os }}-cpp-verify-

      - name: Run static analysis
        run: |
          source .espup.sh
          pio check

      - name: Build project
        run: |
          source .espup.sh
          just build

  full-verification:
    name: Full Project Verification
    runs-on: ubuntu-latest
    needs: [rust-checks, cpp-checks]
    steps:
      - name: All checks passed
        run: echo "All verification checks passed successfully!"
